{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Counterweight","text":"<p>Counterweight is an experimental text user interface (TUI) framework for Python, inspired by React and Tailwind CSS.</p> <p>A TUI application built with Counterweight is a tree of declarative components, each of which represents some piece of the UI by bundling together a visual element along with its state and how that state should change due to events like user input.</p> <p>As an application author, you define the components and their relationships as a tree of Python functions. You use hooks to manage state and side effects, and styles to change how the elements look.</p> <p>Counterweight takes this declarative representation of the UI and renders it to the terminal, updating the UI when state changes in response to user input or side effects (by calling your function tree).</p>"},{"location":"#installation","title":"Installation","text":"<p>Counterweight is available on PyPI:</p> <pre><code>pip install counterweight\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#next","title":"Next","text":""},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>#165   Dropped support for Python <code>3.11</code>.</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>#123   Add styling for content area background color.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>#125   Mouse wheel scroll events are now captured correctly   (they were previously reported as mouse presses).   The <code>check-input</code> CLI subcommand is also fixed   (was broken by #86).</li> </ul>"},{"location":"changelog/#009","title":"<code>0.0.9</code>","text":"<p>Released <code>2024-02-27</code></p>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>#121   A change in effect reconciliation introduced in <code>0.0.8</code> caused a regression in the behavior of <code>use_effect</code>,   where if the <code>setup</code> function <code>return</code>ed (i.e., stopped itself),   Counterweight would crash when trying to cancel the effect.   This now works again.</li> </ul>"},{"location":"changelog/#008","title":"<code>0.0.8</code>","text":"<p>Released <code>2024-02-17</code></p>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>#110   Calling a <code>use_state</code> setter with a <code>value</code> equal to the current value of the state   no longer emits a <code>SetState</code> event, to avoid triggering unnecessary render cycles.</li> <li>#111   Border healing is now more efficient, especially when there are many non-border characters in the UI.</li> <li>#112   Major, backwards-incompatible changes to how Counterweight handles mouse interactions.   The <code>on_mouse_down</code> and <code>on_mouse_up</code> event handlers have been removed;   use the new combined <code>on_mouse</code> event handler instead, which receives all mouse events   (<code>MouseMoved</code>,   <code>MouseDown</code>, and   <code>MouseUp</code>).   The <code>on_hover</code> style attribute on elements has been removed;   use the new   <code>use_mouse</code>,   <code>use_rects</code>,   and <code>use_hovered</code>   hooks instead, and calculate the desired style in your component.   The goal of these changes is to provide more flexibility and control over mouse interactions   to application authors while minimizing the work that Counterweight needs to do while rendering,   at the cost of more complex application code for simple cases like detecting hover state.</li> </ul>"},{"location":"changelog/#007","title":"<code>0.0.7</code>","text":"<p>Released <code>2024-02-02</code></p>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>#105 <code>Screenshot</code> and <code>Suspend</code> handlers can now be <code>async</code> functions.</li> </ul>"},{"location":"changelog/#006","title":"<code>0.0.6</code>","text":"<p>Released <code>2024-01-28</code></p>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>#92   Added an <code>inset</code> attribute to <code>Absolute</code> that chooses which corner   of the parent's context box to use as the origin for the absolute positioning.</li> <li>#98   Added a <code>z</code> attribute to <code>Flex</code> that controls the stacking order of elements.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>#101   The <code>initial_value</code> of <code>use_ref</code> may now be a <code>Callable[[], T]</code> instead of just a <code>T</code>.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>#96 <code>Chunk</code>s can no longer be created with <code>CellPaint</code>s directly.</li> </ul>"},{"location":"changelog/#005","title":"<code>0.0.5</code>","text":"<p>Released <code>2024-01-06</code></p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>#86   Added a <code>Suspend</code> control which suspends the Counterweight application while a user-supplied callback function runs.   Counterweight will stop controlling the terminal while the callback runs, and will resume when the callback returns.   This can be used to run a subprocess that also wants control of the terminal (e.g., a text editor).</li> <li>#88 #90   Implemented <code>Absolute</code> and <code>Fixed</code>   positioning, which allow for precise placement of elements outside the normal layout flow.</li> </ul>"},{"location":"changelog/#004","title":"<code>0.0.4</code>","text":"<p>Released <code>2023-12-31</code></p>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>#83   Fixed virtual terminal escape code parsing for mouse tracking when the moues coordinates are large (&gt;94 or so).   Mouse tracking should now work for any terminal size.   Various <code>Key</code> members that aren't currently parseable have been removed to avoid confusion.</li> </ul>"},{"location":"changelog/#003","title":"<code>0.0.3</code>","text":"<p>Released <code>2023-12-30</code></p>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>#71   Controls are now a union over different <code>@dataclass</code>es (instead of an <code>Enum</code>) to allow for more flexibility.   The <code>Screenshot</code> control now takes a callback function which will be called with the SVG screenshot as an XML tree.</li> <li>#81   The minimum Python version has been raised to <code>3.11.2</code> due to a bug in CPython <code>3.11.1</code></li> </ul>"},{"location":"changelog/#002","title":"<code>0.0.2</code>","text":"<p>Released <code>2023-12-26</code></p>"},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>#65   Added ability to take an SVG \"screenshot\" by returning <code>Control.Screenshot</code> from an event handler.   The screenshot will be saved to the current working directory as <code>screenshot.svg</code>; more options will be added in the future.</li> <li>#66   Added \"border healing\": when border elements for certain border types are adjacent to each other and appear as if they   should \"join up\", but don't because they belong to different elements, they will now be joined up.</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Various namespaces moved around to make more sense (especially in documentation)   and separate concerns better as part of #68.</li> </ul>"},{"location":"changelog/#001","title":"<code>0.0.1</code>","text":"<p>Released <code>2023-12-19</code></p>"},{"location":"components/","title":"Components","text":""},{"location":"components/#api","title":"API","text":""},{"location":"components/#counterweight.components.component","title":"counterweight.components.component","text":"<pre><code>component(\n    func: Callable[P, AnyElement]\n) -&gt; Callable[P, Component]\n</code></pre> <p>A decorator that marks a function as a component.</p>"},{"location":"cookbook/border-healing/","title":"Border Healing","text":"<p>When border elements for certain border types are adjacent to each other and appear as if they should \"join up\", but don't because they belong to different elements, they will be joined up.</p> <pre><code>from counterweight.app import app\nfrom counterweight.components import component\nfrom counterweight.controls import AnyControl, Quit, Screenshot, ToggleBorderHealing\nfrom counterweight.elements import Div, Text\nfrom counterweight.events import KeyPressed\nfrom counterweight.keys import Key\nfrom counterweight.styles.utilities import *\n\ncommon_style = align_self_stretch | justify_children_center | align_children_center\nborder_kind = border_double\n\n\n@component\ndef root() -&gt; Div:\n    def on_key(event: KeyPressed) -&gt; AnyControl | None:\n        match event.key:\n            case Key.Space:\n                return ToggleBorderHealing()\n            case _:\n                return None\n\n    return Div(\n        style=row | common_style,\n        on_key=on_key,\n        children=[\n            Div(\n                style=col | common_style,\n                children=[\n                    box(\"A1\", edge_style=None),\n                    box(\"A2\", edge_style=border_bottom_left_right),\n                ],\n            ),\n            Div(\n                style=col | common_style,\n                children=[\n                    Div(\n                        style=row | common_style,\n                        children=[\n                            box(\"B1\", edge_style=border_top_bottom_right),\n                            box(\"B2\", edge_style=border_top_bottom_right),\n                        ],\n                    ),\n                    Div(\n                        style=row | common_style,\n                        children=[\n                            box(\"C1\"),\n                            box(\"C2\"),\n                            box(\"C3\"),\n                            box(\"C4\"),\n                        ],\n                    ),\n                    Div(\n                        style=row | common_style,\n                        children=[\n                            box(\"D1\"),\n                            box(\"D2\"),\n                            box(\"D3\"),\n                        ],\n                    ),\n                ],\n            ),\n        ],\n    )\n\n\n@component\ndef box(s: str, edge_style: Style | None = border_bottom_right) -&gt; Div:\n    return Div(\n        style=common_style | border_kind | edge_style,\n        children=[\n            Text(\n                style=text_justify_center | (text_cyan_500 if edge_style == border_bottom_right else text_amber_500),\n                content=s,\n            )\n        ],\n    )\n</code></pre> <p>With border healing enabled:</p> <p></p> <p>With border healing disabled:</p> <p></p>"},{"location":"cookbook/border-titles/","title":"Border Titles","text":"<p>To add title text to a border, use an absolutely-positioned <code>Text</code> inside a <code>Div</code> that provides the border.</p> <pre><code>from counterweight.app import app\nfrom counterweight.components import component\nfrom counterweight.controls import Quit, Screenshot\nfrom counterweight.elements import Div, Text\nfrom counterweight.styles.utilities import *\n\n\n@component\ndef root() -&gt; Div:\n    return Div(\n        style=col,\n        children=[\n            Div(\n                style=row | align_self_stretch | justify_children_center | align_children_center | border_lightrounded,\n                children=[\n                    Text(\n                        style=inset_top_left | absolute(x=1, y=-1),\n                        content=\" Top-Left Title \",\n                    ),\n                    Text(\n                        style=inset_top_center | absolute(x=0, y=-1),\n                        content=\" Top-Center Title \",\n                    ),\n                    Text(\n                        style=inset_top_right | absolute(x=-1, y=-1),\n                        content=\" Top-Right Title \",\n                    ),\n                    Text(\n                        style=inset_bottom_left | absolute(x=1, y=1),\n                        content=\" Bottom-Left Title \",\n                    ),\n                    Text(\n                        style=inset_bottom_center | absolute(x=0, y=1),\n                        content=\" Bottom-Center Title \",\n                    ),\n                    Text(\n                        style=inset_bottom_right | absolute(x=-1, y=1),\n                        content=\" Bottom-Right Title \",\n                    ),\n                    Text(\n                        style=weight_none,\n                        content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n                    ),\n                ],\n            )\n        ],\n    )\n</code></pre> <p></p>"},{"location":"elements/","title":"Elements","text":""},{"location":"elements/div/","title":"<code>Div</code>","text":""},{"location":"elements/div/#api","title":"API","text":""},{"location":"elements/div/#counterweight.elements.Div","title":"counterweight.elements.Div","text":""},{"location":"elements/div/#counterweight.elements.Div.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal['div'] = 'div'\n</code></pre>"},{"location":"elements/div/#counterweight.elements.Div.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style: Style = Field(default=Style())\n</code></pre>"},{"location":"elements/div/#counterweight.elements.Div.children","title":"children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>children: Sequence[Component | AnyElement] = Field(\n    default=()\n)\n</code></pre>"},{"location":"elements/div/#counterweight.elements.Div.on_key","title":"on_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>on_key: Callable[[KeyPressed], AnyControl | None] | None = (\n    None\n)\n</code></pre>"},{"location":"elements/div/#counterweight.elements.Div.on_mouse","title":"on_mouse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>on_mouse: (\n    Callable[[MouseEvent], AnyControl | None] | None\n) = None\n</code></pre>"},{"location":"elements/text/","title":"<code>Text</code>","text":""},{"location":"elements/text/#api","title":"API","text":""},{"location":"elements/text/#counterweight.elements.Text","title":"counterweight.elements.Text","text":""},{"location":"elements/text/#counterweight.elements.Text.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal['text'] = 'text'\n</code></pre>"},{"location":"elements/text/#counterweight.elements.Text.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content: str | Sequence[Chunk]\n</code></pre>"},{"location":"elements/text/#counterweight.elements.Text.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style: Style = Field(default=Style())\n</code></pre>"},{"location":"elements/text/#counterweight.elements.Text.on_key","title":"on_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>on_key: Callable[[KeyPressed], AnyControl | None] | None = (\n    None\n)\n</code></pre>"},{"location":"elements/text/#counterweight.elements.Text.on_mouse","title":"on_mouse  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>on_mouse: (\n    Callable[[MouseEvent], AnyControl | None] | None\n) = None\n</code></pre>"},{"location":"elements/text/#counterweight.elements.Text.children","title":"children  <code>property</code>","text":"<pre><code>children: Sequence[Component | AnyElement]\n</code></pre>"},{"location":"elements/text/#counterweight.elements.Text.cells","title":"cells  <code>cached</code> <code>property</code>","text":"<pre><code>cells: tuple[CellPaint, ...]\n</code></pre>"},{"location":"hooks/","title":"Hooks","text":"<p>Counterweight uses \"hooks\", inspired by React hooks, to manage state and side effects in components.</p>"},{"location":"hooks/use_effect/","title":"<code>use_effect</code>","text":""},{"location":"hooks/use_effect/#api","title":"API","text":""},{"location":"hooks/use_effect/#counterweight.hooks.use_effect","title":"counterweight.hooks.use_effect","text":"<pre><code>use_effect(setup: Setup, deps: Deps = None) -&gt; None\n</code></pre> PARAMETER DESCRIPTION <code>setup</code> <p>The setup function that will be called when the component first mounts or if its dependencies have changed (see below).</p> <p> TYPE: <code>Setup</code> </p> <code>deps</code> <p>The dependencies of the effect. If any of the dependencies change, the previous invocation of the <code>setup</code> function will be cancelled and the <code>setup</code> function will be run again. If <code>None</code>, the <code>setup</code> function will be run on every render.</p> <p> TYPE: <code>Deps</code> DEFAULT: <code>None</code> </p>"},{"location":"hooks/use_effect/#counterweight.hooks.Setup","title":"counterweight.hooks.Setup  <code>module-attribute</code>","text":"<pre><code>Setup = Callable[[], Coroutine[None, None, None]]\n</code></pre>"},{"location":"hooks/use_effect/#counterweight.hooks.Deps","title":"counterweight.hooks.Deps  <code>module-attribute</code>","text":"<pre><code>Deps = tuple[object, ...] | None\n</code></pre>"},{"location":"hooks/use_effect/#effect-cancellation","title":"Effect Cancellation","text":"<p>Effects are canceled by the framework when one of the following conditions is met:</p> <ul> <li>The component that created the effect is unmounted.</li> <li>The effect's dependencies change and the effect's <code>setup</code> function is going to be re-run.</li> </ul> <p>Effect cancellation is synchronous</p> <p>Note that the effect is synchronously cancelled (i.e., the <code>Task</code> that represents the effect is cancelled and then <code>await</code>ed; see this discussion) before the next render cycle starts. Assuming that you do not mess with the cancellation yourself from inside the effect setup function, the effect will definitely stop running before the next frame is rendered.</p>"},{"location":"hooks/use_hovered/","title":"<code>use_hovered</code>","text":""},{"location":"hooks/use_hovered/#api","title":"API","text":""},{"location":"hooks/use_hovered/#counterweight.hooks.use_hovered","title":"counterweight.hooks.use_hovered","text":"<pre><code>use_hovered() -&gt; Hovered\n</code></pre> RETURNS DESCRIPTION <code>Hovered</code> <p>A record describing which of the calling component's top-level element's <code>content</code>, <code>padding</code>, <code>border</code>, and <code>margin</code> rectangles the mouse is currently inside.</p>"},{"location":"hooks/use_hovered/#counterweight.hooks.Hovered","title":"counterweight.hooks.Hovered  <code>dataclass</code>","text":"<pre><code>Hovered(\n    content: bool, padding: bool, border: bool, margin: bool\n)\n</code></pre>"},{"location":"hooks/use_hovered/#counterweight.hooks.Hovered.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content: bool\n</code></pre>"},{"location":"hooks/use_hovered/#counterweight.hooks.Hovered.padding","title":"padding  <code>instance-attribute</code>","text":"<pre><code>padding: bool\n</code></pre>"},{"location":"hooks/use_hovered/#counterweight.hooks.Hovered.border","title":"border  <code>instance-attribute</code>","text":"<pre><code>border: bool\n</code></pre>"},{"location":"hooks/use_hovered/#counterweight.hooks.Hovered.margin","title":"margin  <code>instance-attribute</code>","text":"<pre><code>margin: bool\n</code></pre>"},{"location":"hooks/use_mouse/","title":"<code>use_mouse</code>","text":""},{"location":"hooks/use_mouse/#api","title":"API","text":"<p><code>use_mouse</code> vs. <code>on_mouse</code></p> <p><code>use_mouse</code> and <code>on_mouse</code> provide similar functionality, but <code>use_mouse</code> is a hook and <code>on_mouse</code> is an event handler. <code>use_mouse</code> is more efficient when a component depends only on the current state of the mouse (e.g., the current position, or whether a button is currently pressed), while <code>on_mouse</code> is more convenient when a component needs to respond to changes in the mouse state, (e.g., a button release (<code>MouseUp</code>).</p>"},{"location":"hooks/use_mouse/#counterweight.hooks.use_mouse","title":"counterweight.hooks.use_mouse","text":"<pre><code>use_mouse() -&gt; Mouse\n</code></pre> RETURNS DESCRIPTION <code>Mouse</code> <p>A record describing the current state of the mouse.</p>"},{"location":"hooks/use_mouse/#counterweight.hooks.Mouse","title":"counterweight.hooks.Mouse  <code>dataclass</code>","text":"<pre><code>Mouse(\n    absolute: Position, motion: Position, button: int | None\n)\n</code></pre>"},{"location":"hooks/use_mouse/#counterweight.hooks.Mouse.absolute","title":"absolute  <code>instance-attribute</code>","text":"<pre><code>absolute: Position\n</code></pre> <p>The absolute position of the mouse on the screen (i.e., the top-left corner of the screen is <code>Position(x=0, y=0)</code>).</p>"},{"location":"hooks/use_mouse/#counterweight.hooks.Mouse.motion","title":"motion  <code>instance-attribute</code>","text":"<pre><code>motion: Position\n</code></pre> <p>The difference in the <code>absolute</code> position of the mouse since the last render cycle.</p>"},{"location":"hooks/use_mouse/#counterweight.hooks.Mouse.button","title":"button  <code>instance-attribute</code>","text":"<pre><code>button: int | None\n</code></pre> <p>The button that is currently pressed, or <code>None</code> if no button is pressed.</p>"},{"location":"hooks/use_rects/","title":"<code>use_rects</code>","text":""},{"location":"hooks/use_rects/#api","title":"API","text":"<p>Use <code>use_hovered</code> for detecting hover state</p> <p><code>use_rects</code> is a low-level hook. For the common use case of detecting whether the mouse is hovering over an element, use the higher-level <code>use_hovered</code> hook instead.</p> <p>This is not a stateful hook</p> <p><code>use_rects</code> is not a stateful hook: it does not use <code>use_state</code> under the hood. That means that if the dimensions of the component's top-level element change in a way that is not connected to some other state change (e.g., if a sibling component changes size), using this hook will not cause the component to re-render.</p>"},{"location":"hooks/use_rects/#counterweight.hooks.use_rects","title":"counterweight.hooks.use_rects","text":"<pre><code>use_rects() -&gt; Rects\n</code></pre> RETURNS DESCRIPTION <code>Rects</code> <p>A recording describing the rectangular areas of the <code>content</code>, <code>padding</code>, <code>border</code>, and <code>margin</code> of the calling component's top-level element on the previous render cycle. In the initial render, the returned rectangles will all be positioned at the top-left corner of the screen with <code>0</code> width and height.</p>"},{"location":"hooks/use_rects/#counterweight.hooks.Rects","title":"counterweight.hooks.Rects  <code>dataclass</code>","text":"<pre><code>Rects(\n    content: Rect, padding: Rect, border: Rect, margin: Rect\n)\n</code></pre>"},{"location":"hooks/use_rects/#counterweight.hooks.Rects.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content: Rect\n</code></pre>"},{"location":"hooks/use_rects/#counterweight.hooks.Rects.padding","title":"padding  <code>instance-attribute</code>","text":"<pre><code>padding: Rect\n</code></pre>"},{"location":"hooks/use_rects/#counterweight.hooks.Rects.border","title":"border  <code>instance-attribute</code>","text":"<pre><code>border: Rect\n</code></pre>"},{"location":"hooks/use_rects/#counterweight.hooks.Rects.margin","title":"margin  <code>instance-attribute</code>","text":"<pre><code>margin: Rect\n</code></pre>"},{"location":"hooks/use_ref/","title":"<code>use_ref</code>","text":""},{"location":"hooks/use_ref/#api","title":"API","text":""},{"location":"hooks/use_ref/#counterweight.hooks.use_ref","title":"counterweight.hooks.use_ref","text":"<pre><code>use_ref(initial_value: Getter[T] | T) -&gt; Ref[T]\n</code></pre> PARAMETER DESCRIPTION <code>initial_value</code> <p>the initial value of the ref. It can either be the initial value itself, or a zero-argument function that returns the initial value.</p> <p> TYPE: <code>Getter[T] | T</code> </p> RETURNS DESCRIPTION <code>Ref[T]</code> <p>A <code>Ref</code> that holds a reference to the given value.</p>"},{"location":"hooks/use_ref/#counterweight.hooks.Ref","title":"counterweight.hooks.Ref","text":""},{"location":"hooks/use_ref/#counterweight.hooks.Ref.current","title":"current  <code>instance-attribute</code>","text":"<pre><code>current: T\n</code></pre>"},{"location":"hooks/use_state/","title":"<code>use_state</code>","text":""},{"location":"hooks/use_state/#api","title":"API","text":""},{"location":"hooks/use_state/#counterweight.hooks.use_state","title":"counterweight.hooks.use_state","text":"<pre><code>use_state(\n    initial_value: Getter[T],\n) -&gt; tuple[T, Setter[T]]\n</code></pre><pre><code>use_state(initial_value: T) -&gt; tuple[T, Setter[T]]\n</code></pre> <pre><code>use_state(\n    initial_value: Getter[T] | T,\n) -&gt; tuple[T, Setter[T]]\n</code></pre> PARAMETER DESCRIPTION <code>initial_value</code> <p>The initial value of the state. It can either be the initial value itself, or a zero-argument function that returns the initial value.</p> <p> TYPE: <code>Getter[T] | T</code> </p> RETURNS DESCRIPTION <code>T</code> <p>The current value of the state (i.e., for the current render cycle).</p> <code>Setter[T]</code> <p>A function that can be called to update the value of the state (e.g., in an event handler). It can either be called with the new value of the state, or a function that takes the current value of the state and returns the new value of the state. If the value is not equal to the current of the state, Counterweight will trigger a render cycle.</p>"},{"location":"hooks/use_state/#counterweight.hooks.Getter","title":"counterweight.hooks.Getter  <code>module-attribute</code>","text":"<pre><code>Getter = Callable[[], T]\n</code></pre>"},{"location":"hooks/use_state/#counterweight.hooks.Setter","title":"counterweight.hooks.Setter  <code>module-attribute</code>","text":"<pre><code>Setter = Callable[[Callable[[T], T] | T], None]\n</code></pre>"},{"location":"input-handling/","title":"Input Handling","text":""},{"location":"input-handling/controls/","title":"Controls","text":"<p>Controls are objects that can be returned from event handlers (e.g., <code>on_key</code>) to instruct Counterweight to take some action during the render loop, such as gracefully quitting the application or playing the terminal \"bell\" sound.</p>"},{"location":"input-handling/controls/#api","title":"API","text":""},{"location":"input-handling/controls/#counterweight.controls.AnyControl","title":"counterweight.controls.AnyControl  <code>module-attribute</code>","text":"<pre><code>AnyControl = Union[\n    Quit, Bell, Screenshot, Suspend, ToggleBorderHealing\n]\n</code></pre>"},{"location":"input-handling/controls/#counterweight.controls.Quit","title":"counterweight.controls.Quit  <code>dataclass</code>","text":"<pre><code>Quit()\n</code></pre> <p>Cause the application to quit.</p> <p>The quit occurs at the beginning of the next render cycle, so all other events that are due to be processed in the current cycle will be processed before the application exits.</p>"},{"location":"input-handling/controls/#counterweight.controls.Bell","title":"counterweight.controls.Bell  <code>dataclass</code>","text":"<pre><code>Bell()\n</code></pre> <p>Cause the terminal to emit a bell sound.</p> <p>The bell occurs at the beginning of the next render cycle, so all other events that are due to be processed in the current cycle will be processed before the sound is played.</p>"},{"location":"input-handling/controls/#counterweight.controls.Screenshot","title":"counterweight.controls.Screenshot  <code>dataclass</code>","text":"<pre><code>Screenshot(\n    handler: Callable[[ElementTree], Awaitable[None] | None]\n)\n</code></pre> <p>Take a \"screenshot\" of the rendered UI, using the given <code>handler</code> callback function. The screenshot is passed to the <code>handler</code> as an <code>ElementTree</code> containing an SVG representation of the UI.</p> <p>The screenshot is taken at the beginning of the next render cycle, so all other events that are due to be processed in the current cycle will be processed before the screenshot is taken (but the screenshot will still be of the UI from before the next render occurs!).</p>"},{"location":"input-handling/controls/#counterweight.controls.Screenshot.handler","title":"handler  <code>instance-attribute</code>","text":"<pre><code>handler: Callable[[ElementTree], Awaitable[None] | None]\n</code></pre>"},{"location":"input-handling/controls/#counterweight.controls.Screenshot.to_file","title":"to_file  <code>classmethod</code>","text":"<pre><code>to_file(\n    path: Path, indent: int | None = None\n) -&gt; Screenshot\n</code></pre> <p>A convenience method for producing a <code>Screenshot</code> that writes the resulting SVG to the given <code>path</code>.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to write the SVG to. Parent directories will be created if they do not exist.</p> <p> TYPE: <code>Path</code> </p> <code>indent</code> <p>The number of spaces to indent the SVG by (for readability). If <code>None</code>, the SVG will not be indented.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"input-handling/controls/#counterweight.controls.Suspend","title":"counterweight.controls.Suspend  <code>dataclass</code>","text":"<pre><code>Suspend(handler: Callable[[], Awaitable[None] | None])\n</code></pre> <p>Suspend the application while the handler function is running.</p> <p>The application will be suspended (and then resumed) at the beginning of the next render cycle, so all other events that are due to be processed in the current cycle will be processed before the application is suspended.</p>"},{"location":"input-handling/controls/#counterweight.controls.Suspend.handler","title":"handler  <code>instance-attribute</code>","text":"<pre><code>handler: Callable[[], Awaitable[None] | None]\n</code></pre>"},{"location":"input-handling/controls/#counterweight.controls.ToggleBorderHealing","title":"counterweight.controls.ToggleBorderHealing  <code>dataclass</code>","text":"<pre><code>ToggleBorderHealing()\n</code></pre> <p>Toggle whether border healing occurs.</p>"},{"location":"input-handling/events/","title":"Events","text":""},{"location":"input-handling/events/#handling-keyboard-events","title":"Handling Keyboard Events","text":"<p>Each time a key is pressed, Counterweight calls the <code>on_key</code> event handler of every element with a <code>KeyPressed</code> event that holds information about which key was pressed.</p>"},{"location":"input-handling/events/#counterweight.events.KeyPressed","title":"counterweight.events.KeyPressed  <code>dataclass</code>","text":"<pre><code>KeyPressed(key: str)\n</code></pre>"},{"location":"input-handling/events/#counterweight.events.KeyPressed.key","title":"key  <code>instance-attribute</code>","text":"<pre><code>key: str\n</code></pre>"},{"location":"input-handling/events/#handling-mouse-events","title":"Handling Mouse Events","text":"<p>Each time the state of the mouse changes, Counterweight emits a single mouse event, one of <code>MouseMoved</code>, <code>MouseDown</code>, <code>MouseUp</code>, <code>MouseScrolledDown</code>, or <code>MouseScrolledUp</code>.</p> <p>For example, consider the following series of mouse actions and corresponding events:</p> Action Event Mouse starts at position <code>(0, 0)</code> No event emitted Mouse moves to position <code>(1, 0)</code> <code>MouseMoved(position=Position(x=1, y=0), button=None)</code> Mouse button <code>1</code> is pressed <code>MouseDown(position=Position(x=1, y=0), button=1)</code> Mouse moves to position <code>(1, 1)</code> <code>MouseMoved(position=Position(x=1, y=1), button=1)</code> Mouse button <code>1</code> is released <code>MouseUp(position=Position(x=1, y=1), button=1)</code> Mouse button <code>3</code> is pressed <code>MouseDown(position=Position(x=1, y=1), button=3)</code> Mouse moves to position <code>(2, 2)</code> and mouse button <code>3</code> is released simultaneously <code>MouseUp(position=Position(x=2, y=2), button=3)</code> <p>Mouse Button Identifiers</p> <p>Mouse buttons are identified by numbers instead of names (e.g., \"left\", \"middle\", \"right\") because the button numbers are the same regardless of whether the mouse is configured for left-handed or right-handed use.</p> Number Button for Right-Handed Mouse Button for Left-Handed Mouse <code>1</code> Left Right <code>2</code> Middle Middle <code>3</code> Right Left <p>You should always use the numbers instead of names to refer to mouse buttons to ensure that your application works as expected for both left-handed and right-handed users.</p> <p>Counterweight calls the <code>on_mouse</code> event handler of each element whose border rectangle contains the new mouse position or the previous mouse position with the relevant mouse event object.</p> <p><code>use_mouse</code> vs. <code>on_mouse</code></p> <p><code>use_mouse</code> and <code>on_mouse</code> provide similar functionality, but <code>use_mouse</code> is a hook and <code>on_mouse</code> is an event handler. <code>use_mouse</code> is more efficient when a component depends only on the current state of the mouse (e.g., the current position, or whether a button is currently pressed), while <code>on_mouse</code> is more convenient when a component needs to respond to changes in the mouse state, (e.g., a button release <code>MouseUp</code>).</p>"},{"location":"input-handling/events/#counterweight.events.MouseEvent","title":"counterweight.events.MouseEvent  <code>module-attribute</code>","text":"<pre><code>MouseEvent = Union[\n    MouseMoved,\n    MouseDown,\n    MouseUp,\n    MouseScrolledDown,\n    MouseScrolledUp,\n]\n</code></pre>"},{"location":"input-handling/events/#counterweight.events.MouseMoved","title":"counterweight.events.MouseMoved  <code>dataclass</code>","text":"<pre><code>MouseMoved(absolute: Position, button: int | None)\n</code></pre>"},{"location":"input-handling/events/#counterweight.events.MouseMoved.absolute","title":"absolute  <code>instance-attribute</code>","text":"<pre><code>absolute: Position\n</code></pre> <p>The absolute position on the screen that the mouse moved to.</p>"},{"location":"input-handling/events/#counterweight.events.MouseMoved.button","title":"button  <code>instance-attribute</code>","text":"<pre><code>button: int | None\n</code></pre> <p>The button that was held during the motion, or <code>None</code> if no button was pressed.</p>"},{"location":"input-handling/events/#counterweight.events.MouseDown","title":"counterweight.events.MouseDown  <code>dataclass</code>","text":"<pre><code>MouseDown(absolute: Position, button: int)\n</code></pre>"},{"location":"input-handling/events/#counterweight.events.MouseDown.absolute","title":"absolute  <code>instance-attribute</code>","text":"<pre><code>absolute: Position\n</code></pre> <p>The absolute position on the screen that the mouse moved to.</p>"},{"location":"input-handling/events/#counterweight.events.MouseDown.button","title":"button  <code>instance-attribute</code>","text":"<pre><code>button: int\n</code></pre> <p>The mouse button that was pressed during the motion.</p>"},{"location":"input-handling/events/#counterweight.events.MouseUp","title":"counterweight.events.MouseUp  <code>dataclass</code>","text":"<pre><code>MouseUp(absolute: Position, button: int)\n</code></pre>"},{"location":"input-handling/events/#counterweight.events.MouseUp.absolute","title":"absolute  <code>instance-attribute</code>","text":"<pre><code>absolute: Position\n</code></pre> <p>The absolute position on the screen that the mouse moved to.</p>"},{"location":"input-handling/events/#counterweight.events.MouseUp.button","title":"button  <code>instance-attribute</code>","text":"<pre><code>button: int\n</code></pre> <p>The mouse button that was released during the motion.</p>"},{"location":"input-handling/events/#counterweight.events.MouseScrolledDown","title":"counterweight.events.MouseScrolledDown  <code>dataclass</code>","text":"<pre><code>MouseScrolledDown(absolute: Position, direction: int = 1)\n</code></pre>"},{"location":"input-handling/events/#counterweight.events.MouseScrolledDown.absolute","title":"absolute  <code>instance-attribute</code>","text":"<pre><code>absolute: Position\n</code></pre> <p>The absolute position on the screen that the mouse moved to.</p>"},{"location":"input-handling/events/#counterweight.events.MouseScrolledDown.direction","title":"direction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>direction: int = 1\n</code></pre> <p>The direction that the mouse was scrolled as an integer offset; <code>-1</code> for up, <code>+1</code> for down.</p>"},{"location":"input-handling/events/#counterweight.events.MouseScrolledUp","title":"counterweight.events.MouseScrolledUp  <code>dataclass</code>","text":"<pre><code>MouseScrolledUp(absolute: Position, direction: int = -1)\n</code></pre>"},{"location":"input-handling/events/#counterweight.events.MouseScrolledUp.absolute","title":"absolute  <code>instance-attribute</code>","text":"<pre><code>absolute: Position\n</code></pre> <p>The absolute position on the screen that the mouse moved to.</p>"},{"location":"input-handling/events/#counterweight.events.MouseScrolledUp.direction","title":"direction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>direction: int = -1\n</code></pre> <p>The direction that the mouse was scrolled as an integer offset; <code>-1</code> for up, <code>+1</code> for down.</p>"},{"location":"styles/","title":"Styles","text":""},{"location":"styles/#api","title":"API","text":""},{"location":"styles/#counterweight.styles.Style","title":"counterweight.styles.Style","text":""},{"location":"styles/#counterweight.styles.Style.layout","title":"layout  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>layout: Flex = Field(default=Flex())\n</code></pre>"},{"location":"styles/#counterweight.styles.Style.span","title":"span  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>span: Span = Field(default=Span())\n</code></pre>"},{"location":"styles/#counterweight.styles.Style.margin","title":"margin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>margin: Margin = Field(default=Margin())\n</code></pre>"},{"location":"styles/#counterweight.styles.Style.border","title":"border  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>border: Border | None = Field(default=None)\n</code></pre>"},{"location":"styles/#counterweight.styles.Style.padding","title":"padding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>padding: Padding = Field(default=Padding())\n</code></pre>"},{"location":"styles/#counterweight.styles.Style.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content: Content = Field(default=Content())\n</code></pre>"},{"location":"styles/#counterweight.styles.Style.typography","title":"typography  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>typography: Typography = Field(default=Typography())\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex","title":"counterweight.styles.Flex","text":""},{"location":"styles/#counterweight.styles.Flex.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal['flex'] = 'flex'\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex.direction","title":"direction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>direction: Literal['row', 'column'] = 'row'\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex.position","title":"position  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position: Relative | Absolute | Fixed = Field(\n    default=Relative(), discriminator=\"type\"\n)\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex.weight","title":"weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>weight: PositiveInt | None = 1\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex.z","title":"z  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>z: int = 0\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex.align_self","title":"align_self  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>align_self: Literal[\n    \"none\", \"start\", \"center\", \"end\", \"stretch\"\n] = \"none\"\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex.justify_children","title":"justify_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>justify_children: Literal[\n    \"start\",\n    \"center\",\n    \"end\",\n    \"space-between\",\n    \"space-around\",\n    \"space-evenly\",\n] = \"start\"\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex.align_children","title":"align_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>align_children: Literal[\n    \"start\", \"center\", \"end\", \"stretch\"\n] = \"start\"\n</code></pre>"},{"location":"styles/#counterweight.styles.Flex.gap_children","title":"gap_children  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gap_children: NonNegativeInt = 0\n</code></pre>"},{"location":"styles/#counterweight.styles.Span","title":"counterweight.styles.Span","text":""},{"location":"styles/#counterweight.styles.Span.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: int | Literal['auto'] = Field(default='auto')\n</code></pre>"},{"location":"styles/#counterweight.styles.Span.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: int | Literal['auto'] = Field(default='auto')\n</code></pre>"},{"location":"styles/#counterweight.styles.Margin","title":"counterweight.styles.Margin","text":""},{"location":"styles/#counterweight.styles.Margin.top","title":"top  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>top: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Margin.bottom","title":"bottom  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bottom: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Margin.left","title":"left  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>left: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Margin.right","title":"right  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>right: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Margin.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: Color = Field(default=from_name('black'))\n</code></pre>"},{"location":"styles/#counterweight.styles.Border","title":"counterweight.styles.Border","text":""},{"location":"styles/#counterweight.styles.Border.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: BorderKind = Field(default=Light)\n</code></pre>"},{"location":"styles/#counterweight.styles.Border.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style: CellStyle = Field(default=CellStyle())\n</code></pre>"},{"location":"styles/#counterweight.styles.Border.edges","title":"edges  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>edges: frozenset[BorderEdge] = frozenset(\n    {Top, Bottom, Left, Right}\n)\n</code></pre>"},{"location":"styles/#counterweight.styles.Border.contract","title":"contract  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contract: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Padding","title":"counterweight.styles.Padding","text":""},{"location":"styles/#counterweight.styles.Padding.top","title":"top  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>top: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Padding.bottom","title":"bottom  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bottom: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Padding.left","title":"left  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>left: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Padding.right","title":"right  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>right: int = Field(default=0)\n</code></pre>"},{"location":"styles/#counterweight.styles.Padding.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: Color = Field(default=from_name('black'))\n</code></pre>"},{"location":"styles/#counterweight.styles.Typography","title":"counterweight.styles.Typography","text":""},{"location":"styles/#counterweight.styles.Typography.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style: CellStyle = Field(default=CellStyle())\n</code></pre>"},{"location":"styles/#counterweight.styles.Typography.justify","title":"justify  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>justify: Literal['left', 'center', 'right'] = 'left'\n</code></pre>"},{"location":"styles/#counterweight.styles.Typography.wrap","title":"wrap  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wrap: Literal['none', 'paragraphs'] = 'none'\n</code></pre>"},{"location":"styles/#counterweight.styles.Color","title":"counterweight.styles.Color","text":""},{"location":"styles/#counterweight.styles.Color.red","title":"red  <code>instance-attribute</code>","text":"<pre><code>red: int\n</code></pre>"},{"location":"styles/#counterweight.styles.Color.green","title":"green  <code>instance-attribute</code>","text":"<pre><code>green: int\n</code></pre>"},{"location":"styles/#counterweight.styles.Color.blue","title":"blue  <code>instance-attribute</code>","text":"<pre><code>blue: int\n</code></pre>"},{"location":"styles/#counterweight.styles.Color.hex","title":"hex  <code>property</code>","text":"<pre><code>hex: str\n</code></pre>"},{"location":"styles/#counterweight.styles.Color.from_name","title":"from_name  <code>classmethod</code>","text":"<pre><code>from_name(name: str) -&gt; Color\n</code></pre>"},{"location":"styles/#counterweight.styles.Color.from_hex","title":"from_hex  <code>cached</code> <code>classmethod</code>","text":"<pre><code>from_hex(hex: str) -&gt; Color\n</code></pre>"},{"location":"styles/#counterweight.styles.Color.blend","title":"blend","text":"<pre><code>blend(other: Color, alpha: float) -&gt; Color\n</code></pre>"},{"location":"styles/#counterweight.styles.CellStyle","title":"counterweight.styles.CellStyle","text":""},{"location":"styles/#counterweight.styles.CellStyle.foreground","title":"foreground  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>foreground: Color = Field(default=from_name('white'))\n</code></pre>"},{"location":"styles/#counterweight.styles.CellStyle.background","title":"background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>background: Color = Field(default=from_name('black'))\n</code></pre>"},{"location":"styles/#counterweight.styles.CellStyle.bold","title":"bold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bold: bool = False\n</code></pre>"},{"location":"styles/#counterweight.styles.CellStyle.dim","title":"dim  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dim: bool = False\n</code></pre>"},{"location":"styles/#counterweight.styles.CellStyle.italic","title":"italic  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>italic: bool = False\n</code></pre>"},{"location":"styles/#counterweight.styles.CellStyle.underline","title":"underline  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>underline: bool = False\n</code></pre>"},{"location":"styles/#counterweight.styles.CellStyle.strikethrough","title":"strikethrough  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strikethrough: bool = False\n</code></pre>"},{"location":"styles/layout/","title":"Layout","text":""},{"location":"styles/layout/#box-model","title":"Box Model","text":"<p>Counterweight's layout system is roughly based on the CSS box model. When you build your application, you represent it as a hierarchy of nested elements. The layout system constructs a mirrored nested hierarchy of layout boxes, each of which has a size and position (calculated by the layout system). Each layout box is composed of four nested rectangles:</p> <ul> <li>Content: The area where the element's \"content\" is laid out.   What the content actually is depends on the element's type.   For example, a <code>Div</code>'s content is its children,   while a <code>Text</code>'s content is its text.</li> <li>Padding: The area between the content and the border.</li> <li>Border: The area between the padding and the margin,   with a border drawn from box-drawing characters.</li> <li>Margin: The area between the border and the next element.</li> </ul> <p>The size, background color, and other display properties of each area are controlled via dedicated styles. The example below shows how the four areas are laid out for a simple <code>Div</code> element.</p> <pre><code>from counterweight.app import app\nfrom counterweight.components import component\nfrom counterweight.controls import Quit, Screenshot\nfrom counterweight.elements import Div\nfrom counterweight.styles.utilities import *\n\n\n@component\ndef root() -&gt; Div:\n    return Div(\n        style=content_green_500\n        | padding_orange_500\n        | pad_x_2\n        | pad_y_1\n        | border_lightrounded\n        | border_bg_blue_500\n        | margin_red_500\n        | margin_x_2\n        | margin_y_1\n    )\n</code></pre> <p></p> <p>Terminal cells are not square!</p> <p>Unlike in a web browser, where pixel coordinates in the <code>x</code> and <code>y</code> directions represent the same physical distance, terminal cell coordinates (which is what Counterweight uses) are not square: they are twice as tall as they are wide.</p> <p>Be careful with vertical padding and margin in particular, as they will appear to be twice as large as horizontal padding and margin, which can throw off your layout. Adding only horizontal padding/margin is often sufficient. Note how the example above uses twice as much horizontal padding/margin as vertical padding/margin in order to achieve a more equal aspect ratio.</p>"},{"location":"styles/layout/#positioning","title":"Positioning","text":""},{"location":"styles/layout/#relative-positioning","title":"Relative Positioning","text":"<pre><code>from counterweight.app import app\nfrom counterweight.components import component\nfrom counterweight.controls import Quit, Screenshot\nfrom counterweight.elements import Div, Text\nfrom counterweight.styles.utilities import *\n\nextra_style = pad_1 | margin_1\n\n\n@component\ndef root() -&gt; Div:\n    return Div(\n        style=col | justify_children_space_between,\n        children=[\n            Div(\n                style=row,\n                children=[\n                    Text(\n                        style=relative(x=x, y=y) | extra_style | border_lightrounded | margin_red_600,\n                        content=f\"relative(x={x}, y={y})\",\n                    )\n                    for x, y in (\n                        (0, 0),\n                        (0, 5),\n                        (0, -3),\n                    )\n                ],\n            ),\n            Div(\n                style=row,\n                children=[\n                    Text(\n                        style=relative(x=x, y=y) | extra_style | border_heavy | margin_amber_600,\n                        content=f\"relative(x={x}, y={y})\",\n                    )\n                    for x, y in (\n                        (0, 0),\n                        (3, 3),\n                        (0, 0),\n                    )\n                ],\n            ),\n            Div(\n                style=row,\n                children=[\n                    Text(\n                        style=relative(x=x, y=y) | extra_style | border_light | margin_violet_700,\n                        content=f\"relative(x={x}, y={y})\",\n                    )\n                    for x, y in (\n                        (0, 0),\n                        (5, 0),\n                        (0, -5),\n                    )\n                ],\n            ),\n        ],\n    )\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Relative","title":"counterweight.styles.Relative","text":"<p>Relative positioning is relative to the parent element's content box. Elements occupy space and are laid out next to their siblings according to the parent's layout direction.</p>"},{"location":"styles/layout/#counterweight.styles.Relative.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal['relative'] = 'relative'\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Relative.x","title":"x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>x: int = 0\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Relative.y","title":"y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>y: int = 0\n</code></pre>"},{"location":"styles/layout/#absolute-positioning","title":"Absolute Positioning","text":"<pre><code>from counterweight.app import app\nfrom counterweight.components import component\nfrom counterweight.controls import Quit, Screenshot\nfrom counterweight.elements import Div, Text\nfrom counterweight.styles.utilities import *\n\nextra_style = border_light | pad_1 | margin_1\n\n\n@component\ndef root() -&gt; Div:\n    return Div(\n        style=col | justify_children_space_around,\n        children=[\n            Div(\n                style=border_heavy,\n                children=[\n                    Text(\n                        style=text_green_600,\n                        content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n                    )\n                ]\n                + [\n                    Text(\n                        style=absolute(x=x, y=y) | extra_style | margin_red_600,\n                        content=f\"absolute(x={x}, y={y})\",\n                    )\n                    for x, y in (\n                        (0, 0),\n                        (10, -7),\n                        (33, 3),\n                    )\n                ],\n            ),\n            Div(\n                style=border_heavy,\n                children=[\n                    Text(\n                        style=text_cyan_600,\n                        content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n                    )\n                ]\n                + [\n                    Text(\n                        style=absolute(x=x, y=y) | extra_style | margin_amber_600,\n                        content=f\"absolute(x={x}, y={y})\",\n                    )\n                    for x, y in (\n                        (0, 0),\n                        (10, -7),\n                        (33, 3),\n                    )\n                ],\n            ),\n        ],\n    )\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Absolute","title":"counterweight.styles.Absolute","text":"<p>Absolute positioning is relative to the parent element's content box, but the element does not occupy space in the layout.</p> <p>The <code>inset</code> property determines which corner of the parent element's content box this element is positioned relative to.</p>"},{"location":"styles/layout/#counterweight.styles.Absolute.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal['absolute'] = 'absolute'\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Absolute.x","title":"x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>x: int = 0\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Absolute.y","title":"y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>y: int = 0\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Absolute.inset","title":"inset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inset: Inset = Field(default=Inset())\n</code></pre>"},{"location":"styles/layout/#controlling-overlapping-with-z","title":"Controlling Overlapping with <code>z</code>","text":"<pre><code>from counterweight.app import app\nfrom counterweight.components import component\nfrom counterweight.controls import Quit, Screenshot\nfrom counterweight.elements import Div, Text\nfrom counterweight.styles.utilities import *\n\n\n@component\ndef root() -&gt; Div:\n    return Div(\n        style=col,\n        children=[\n            Text(\n                style=z(1) | absolute(6, 6) | border_lightrounded | margin_1 | margin_purple_600,\n                content=\"z = +1\",\n            ),\n            Text(\n                style=z(0) | absolute(4, 3) | border_lightrounded | margin_1 | margin_teal_600,\n                content=\"z =  0\",\n            ),\n            Text(\n                style=z(-1) | absolute(0, 0) | border_lightrounded | margin_1 | margin_red_600,\n                content=\"z = -1\",\n            ),\n            Text(\n                style=z(2) | absolute(13, 3) | border_lightrounded | margin_1 | margin_amber_600,\n                content=\"z = +2\",\n            ),\n        ],\n    )\n</code></pre> <pre><code>from counterweight.app import app\nfrom counterweight.components import component\nfrom counterweight.controls import Quit, Screenshot\nfrom counterweight.elements import Div, Text\nfrom counterweight.styles.utilities import *\n\n\n@component\ndef root() -&gt; Div:\n    return Div(\n        style=col | align_self_stretch,\n        children=[\n            Div(\n                style=row | align_self_stretch | border_heavy,\n                children=[\n                    Text(\n                        style=inset_top_left,\n                        content=\"inset_top_left\",\n                    ),\n                    Text(\n                        style=inset_top_left | absolute(x=3, y=3),\n                        content=\"inset_top_left | absolute(x=3, y=3)\",\n                    ),\n                    Text(\n                        style=inset_top_center,\n                        content=\"inset_top_center\",\n                    ),\n                    Text(\n                        style=inset_top_right,\n                        content=\"inset_top_right\",\n                    ),\n                    Text(\n                        style=inset_center_left,\n                        content=\"inset_center_left\",\n                    ),\n                    Text(\n                        style=inset_center_center,\n                        content=\"inset_center_center\",\n                    ),\n                    Text(\n                        style=inset_center_center | absolute(x=-2, y=-4),\n                        content=\"inset_center_center | absolute(x=-2, y=-4)\",\n                    ),\n                    Text(\n                        style=inset_center_right,\n                        content=\"inset_center_right\",\n                    ),\n                    Text(\n                        style=inset_bottom_left,\n                        content=\"inset_bottom_left\",\n                    ),\n                    Text(\n                        style=inset_bottom_center,\n                        content=\"inset_bottom_center\",\n                    ),\n                    Text(\n                        style=inset_bottom_right,\n                        content=\"inset_bottom_right\",\n                    ),\n                    Text(\n                        style=inset_bottom_right | absolute(y=-4),\n                        content=\"inset_bottom_right | absolute(y=-4)\",\n                    ),\n                ],\n            )\n        ],\n    )\n</code></pre>"},{"location":"styles/layout/#fixed-positioning","title":"Fixed Positioning","text":"<pre><code>from counterweight.app import app\nfrom counterweight.components import component\nfrom counterweight.controls import Quit, Screenshot\nfrom counterweight.elements import Div, Text\nfrom counterweight.styles.utilities import *\n\nextra_style = border_heavy | pad_1 | margin_1 | margin_red_600\n\n\n@component\ndef root() -&gt; Div:\n    return Div(\n        style=row,\n        children=[\n            Text(\n                style=fixed(x=x, y=y) | extra_style,\n                content=f\"fixed(x={x}, y={y})\",\n            )\n            for x, y in (\n                (0, 0),\n                (10, 10),\n                (30, 20),\n                (15, 25),\n                (33, 3),\n            )\n        ],\n    )\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Fixed","title":"counterweight.styles.Fixed","text":"<p>Fixed positioning is relative to the screen's top-left corner <code>(0, 0)</code>.</p>"},{"location":"styles/layout/#counterweight.styles.Fixed.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal['fixed'] = 'fixed'\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Fixed.x","title":"x  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>x: int = 0\n</code></pre>"},{"location":"styles/layout/#counterweight.styles.Fixed.y","title":"y  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>y: int = 0\n</code></pre>"},{"location":"styles/utilities/","title":"Utilities","text":"<p>To avoid the tedium of writing out styles explicitly over and over, Counterweight provides a variety of Tailwind-inspired \"utility styles\". These utilities are pre-defined styles that can be combined to form more complex styles.</p> <p>The utilities can be imported from the <code>counterweight.styles.utilities</code> module. We recommend a <code>*</code> import for ease of use:</p> <pre><code>from counterweight.styles.utilities import *\n</code></pre> <p>Each utility is a pre-defined <code>Style</code> specifying just a small set of properties. For example, <code>border_rose_200</code> is defined as: <pre><code>from counterweight.styles import Style, Border, Color, CellStyle\n\nborder_rose_200 = Style(\n    border=Border(style=CellStyle(foreground=Color.from_hex(\"#fecdd3\")))\n)\n</code></pre></p> <p>Since they are normal <code>Style</code>s, they can be combined to form more complex styles using the <code>|</code> operator. Here we make a new <code>Style</code> for a <code>rose_200</code>-colored heavy border on the top and bottom sides:</p> <pre><code>from counterweight.styles.utilities import *\n\nborder_heavy_top_bottom_rose_200 = border_heavy | border_rose_200 | border_top_bottom\n</code></pre> <p>Actually giving a name to the new style is optional. We can also use the expression <code>border_heavy | border_rose_200 | border_top_bottom</code> directly in our component:</p> <pre><code>from counterweight.styles.utilities import *\nfrom counterweight.components import component\nfrom counterweight.elements import Text\n\n\n@component\ndef my_component() -&gt; Text:\n    return Text(\n        content=\"Hello, world!\",\n        style=border_heavy | border_rose_200 | border_top_bottom,\n    )\n</code></pre> <p>Performance Considerations</p> <p>If you have an expression like <code>border_heavy | border_rose_200 | border_top_bottom</code> in your component, it will be evaluated every time the component is rendered. Merging styles with <code>|</code> does take some time, though it is aggressively cached inside the framework. If you find that this is causing performance issues, you should create the style just once, ideally outside your component (i.e., at module scope), so that it runs only once.</p>"},{"location":"under-the-hood/","title":"Under the Hood","text":"<p>This section is for those who want to know more about how Counterweight's internals work.</p>"},{"location":"under-the-hood/#inspirations","title":"Inspirations","text":"<p>Counterweight is inspired by a variety of existing frameworks and libraries:</p> <ul> <li>React - state and side effect management via hooks, component tree,   declarative/immediate-mode UI</li> <li>Tailwind CSS - utility styles on top of a granular CSS-like framework</li> <li>Textual - rendering to the terminal without going through something like   curses, CSS-like styles</li> </ul>"},{"location":"under-the-hood/#data-flow","title":"Data Flow","text":"<pre><code>flowchart TB\n\n    en[Entrypoint]\n    r[Render]\n    l[Layout]\n    p[Paint]\n\n    subgraph Output\n        ph[Paint History]\n        dp[Overlay &amp; Diff Paint]\n        d[Apply Paint]\n        t[Terminal Output]\n    end\n\n    subgraph Input\n        i[Keyboard/Mouse Input]\n        vp[Parse VT Commands]\n        ev[Populate Event Stream]\n        eh[Call Event Handlers]\n    end\n\n    subgraph Effects\n        efm[Mount/Unmount Effects]\n        eff[Mounted Effects]\n    end\n\n    en -- Initial Render --&gt; r\n    r -- Shadow Tree --&gt; l\n    l -- Layout Tree --&gt; p\n    p -- Paint --&gt; dp\n\n    ph -- Previous Paint --&gt; dp\n    dp -- Store Current Paint --&gt; ph\n    dp -- Diffed Paint --&gt; d\n\n    d -- VT Commands --&gt; t\n\n    i -- VT Commands --&gt; vp\n    vp -- Keys/Mouse Position --&gt; ev\n    ev -- Events --&gt; eh\n    l -- Handler Tree --&gt; eh\n    p -- Event Targets --&gt; eh\n\n    eh -- Set State --&gt; r\n\n    l -- Mounted Components --&gt; efm\n    efm --&gt; eff\n    eff -- Set State --&gt; r</code></pre>"}]}